/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WavePortalInterface extends ethers.utils.Interface {
  functions: {
    "getAllWaves()": FunctionFragment;
    "getTotalWaves()": FunctionFragment;
    "wave(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllWaves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWaves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wave", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getAllWaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wave", data: BytesLike): Result;

  events: {
    "NewWave(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewWave"): EventFragment;
}

export class WavePortal extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WavePortalInterface;

  functions: {
    getAllWaves(overrides?: CallOverrides): Promise<{
      0: {
        waver: string;
        message: string;
        timestamp: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[];
    }>;

    "getAllWaves()"(overrides?: CallOverrides): Promise<{
      0: {
        waver: string;
        message: string;
        timestamp: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[];
    }>;

    getTotalWaves(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalWaves()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    wave(_message: string, overrides?: Overrides): Promise<ContractTransaction>;

    "wave(string)"(
      _message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAllWaves(
    overrides?: CallOverrides
  ): Promise<
    {
      waver: string;
      message: string;
      timestamp: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }[]
  >;

  "getAllWaves()"(
    overrides?: CallOverrides
  ): Promise<
    {
      waver: string;
      message: string;
      timestamp: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }[]
  >;

  getTotalWaves(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalWaves()"(overrides?: CallOverrides): Promise<BigNumber>;

  wave(_message: string, overrides?: Overrides): Promise<ContractTransaction>;

  "wave(string)"(
    _message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllWaves(
      overrides?: CallOverrides
    ): Promise<
      {
        waver: string;
        message: string;
        timestamp: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[]
    >;

    "getAllWaves()"(
      overrides?: CallOverrides
    ): Promise<
      {
        waver: string;
        message: string;
        timestamp: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[]
    >;

    getTotalWaves(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalWaves()"(overrides?: CallOverrides): Promise<BigNumber>;

    wave(_message: string, overrides?: CallOverrides): Promise<void>;

    "wave(string)"(_message: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewWave(from: string | null, timestamp: null, message: null): EventFilter;
  };

  estimateGas: {
    getAllWaves(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllWaves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalWaves(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalWaves()"(overrides?: CallOverrides): Promise<BigNumber>;

    wave(_message: string, overrides?: Overrides): Promise<BigNumber>;

    "wave(string)"(_message: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllWaves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllWaves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalWaves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalWaves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wave(
      _message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "wave(string)"(
      _message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
